<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>helloworld</title>
    <url>/2020/04/06/helloworld/</url>
    <content><![CDATA[<p>sssd<br>#inods<br>dosewfo</p>
]]></content>
  </entry>
  <entry>
    <title>Express 应用程序生成器</title>
    <url>/2020/04/02/Express%20%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Express-应用程序生成器"><a href="#Express-应用程序生成器" class="headerlink" title="Express 应用程序生成器"></a>Express 应用程序生成器</h1><p><a href="https://www.expressjs.com.cn/starter/generator.html" target="_blank" rel="noopener">Express</a></p>
<ul>
<li><code>sudo npm install -g express-generator</code></li>
</ul>
<blockquote>
<p>express -h </p>
<p><code>zsh: command not found: express</code></p>
<p>1、<code>open ~/.bash_profile</code></p>
<p>2、添加<code>export PATH=$PATH:$HOME/.npm-global/bin:$PATH</code> </p>
<p>3、<code>source ~/.bash_profile</code></p>
<p>4、查看是否添加成功<code>echo $PATH</code></p>
<p>5、<code>express -h</code></p>
</blockquote>
<h2 id="生成模板"><a href="#生成模板" class="headerlink" title="生成模板"></a>生成模板</h2><p>1、<code>express --view-pug myapp</code></p>
<p>2、<code>cd myapp</code></p>
<p>3、<code>npm install</code></p>
<p>4、<code>DEBUG=myapp:* npm start</code></p>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>Node.js 模块</title>
    <url>/2020/04/02/Node.js%20%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="Node-js-模块"><a href="#Node-js-模块" class="headerlink" title="Node.js 模块"></a>Node.js 模块</h2><ul>
<li><p><code>npm init</code></p>
</li>
<li><p><code>npm install &lt;package_name&gt;</code></p>
</li>
<li><p>创建一个test.js文件，并require包</p>
</li>
<li><p>导入代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">exports.printMsg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"This is a message from the demo package"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>node test.js</code></p>
</li>
</ul>
<h2 id="注册npm账号-发布自己的代码仓库"><a href="#注册npm账号-发布自己的代码仓库" class="headerlink" title="注册npm账号,发布自己的代码仓库"></a>注册npm账号,发布自己的代码仓库</h2><ul>
<li><code>npm adduser</code></li>
<li><code>npm login</code></li>
<li><code>npm whoami</code></li>
<li><code>https://www.npmjs.com/~yujinhai</code></li>
<li>发布到自己的仓库：<code>npm publish</code> (一定要确保自己的仓库名称唯一)</li>
<li>更新版本：<code>npm version &lt;update_type&gt;</code>，该命令会改变package.json文件的版本号，并且为git仓库添加tag。 然后重新发布<code>npm publish</code></li>
</ul>
<h2 id="使用自己发布的仓库"><a href="#使用自己发布的仓库" class="headerlink" title="使用自己发布的仓库"></a>使用自己发布的仓库</h2><ul>
<li><p>创建一个文件夹：<code>mkdir myTest</code></p>
</li>
<li><p><code>cd myTest</code></p>
</li>
<li><p><code>npm init</code></p>
</li>
<li><p><code>npm install &lt;刚才上传的包&gt;</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>fastlaneMatch</title>
    <url>/2020/04/02/fastlaneMatch/</url>
    <content><![CDATA[<h2 id="想解决问题：1、能够自动下载最新的profiles文件，2、能够自动添加新的设备"><a href="#想解决问题：1、能够自动下载最新的profiles文件，2、能够自动添加新的设备" class="headerlink" title="想解决问题：1、能够自动下载最新的profiles文件，2、能够自动添加新的设备"></a>想解决问题：1、能够自动下载最新的<code>profiles</code>文件，2、能够自动添加新的设备</h2><h2 id="手动管理证书"><a href="#手动管理证书" class="headerlink" title="手动管理证书"></a>手动管理证书</h2><p>1、在苹果开发中心，下载 <code>certificate (.cer)</code>，并安装到本地<br>2、下载<code>provisioning profile (.mobileprovision)</code>，并安装到本地<br>3、勾选Xcode里面的Automatic选项，然后打包。</p>
<h2 id="使用match管理证书"><a href="#使用match管理证书" class="headerlink" title="使用match管理证书"></a>使用<code>match</code>管理证书</h2><p>1、私有git仓库存储：<code>private keys</code> 和 <code>certificates</code><br>2、换新电脑或者多人的项目比较实用</p>
<h2 id="使用cert和sigh管理证书"><a href="#使用cert和sigh管理证书" class="headerlink" title="使用cert和sigh管理证书"></a>使用<code>cert</code>和<code>sigh</code>管理证书</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lane :beta do</span><br><span class="line">  get_certificates           # 自动下载，要输入苹果账号</span><br><span class="line">  get_provisioning_profile   # 自动下载，要输入苹果账号</span><br><span class="line">  build_app</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h2 id="下面重点介绍-match-方法管理证书"><a href="#下面重点介绍-match-方法管理证书" class="headerlink" title="下面重点介绍 match 方法管理证书"></a>下面重点介绍 <code>match</code> 方法管理证书</h2><p>1、<code>match</code> 插件会自动下载<code>certificates &amp; provisioning profiles</code><br>2、会自动修复过期或损坏的<code>certificates &amp; provisioning profiles</code><br>3、通过git仓库方式管理，很方便团队之间的合作<br>4、手动管理git和通过<code>match</code>管理的差别。<a href="https://codesigning.guide" target="_blank" rel="noopener">参考链接</a><br>5、手动管理，会有各种证书过期，和各种证书副本问题</p>
<h2 id="初始化match"><a href="#初始化match" class="headerlink" title="初始化match"></a>初始化match</h2><p>1、<code>fastlane match init</code> 输入存储证书的git仓库<br>2、<code>fastlane match development</code> 自动生成并上传证书（adhoc, development, appstore, enterprise）</p>
<ul>
<li>输入密码，并且保存到keychain里面 <a href="https://docs.fastlane.tools/actions/match/#passphrase" target="_blank" rel="noopener">passphrase</a></li>
<li><code>~/Library/MobileDevice/Provisioning Profiles</code> 可以查看到安装的文件</li>
</ul>
<p>3、在新电脑拉取证书</p>
<ul>
<li><code>fastlane match development</code> // 会通过苹果管理中心拉取最新证书</li>
<li><code>fastlane match development --readonly</code> // 不会更新证书</li>
</ul>
<h2 id="访问控制–证书同步和分发问题"><a href="#访问控制–证书同步和分发问题" class="headerlink" title="访问控制–证书同步和分发问题"></a>访问控制–证书同步和分发问题</h2><p>1、通过<code>match</code>命令存储证书到git上面<br>2、其他开发者通过密码可以访问git仓库<br>3、其他开发者通过<code>match</code>命令就可以在git仓库获取到最新的证书，并且不能访问苹果中心<br>4、当我们自己更像git仓库是，能够确保其他开发者通过<code>match</code>获取到最新的证书<br>5、只能通过<code>fastlane match development --readonly</code> 方式访问，这样才不用通过苹果中心拉取。</p>
<h2 id="当前需要解决的问题"><a href="#当前需要解决的问题" class="headerlink" title="当前需要解决的问题"></a>当前需要解决的问题</h2><p>1、访问git的权限<br>2、获取到证书后，解码的问题</p>
<h2 id="持续构建"><a href="#持续构建" class="headerlink" title="持续构建"></a>持续构建</h2><p><a href="https://docs.fastlane.tools/actions/match/#passphrase" target="_blank" rel="noopener">https://docs.fastlane.tools/actions/match/#passphrase</a></p>
<p><a href="https://docs.fastlane.tools/best-practices/continuous-integration/travis/" target="_blank" rel="noopener">https://docs.fastlane.tools/best-practices/continuous-integration/travis/</a></p>
<p><a href="https://docs.fastlane.tools/getting-started/ios/setup/#use-a-gemfile" target="_blank" rel="noopener">https://docs.fastlane.tools/getting-started/ios/setup/#use-a-gemfile</a></p>
<p><a href="https://docs.fastlane.tools/#metrics" target="_blank" rel="noopener">https://docs.fastlane.tools/#metrics</a>    </p>
]]></content>
      <categories>
        <category>持续构建</category>
      </categories>
  </entry>
  <entry>
    <title>Node.js 模块</title>
    <url>/2020/04/02/nodejs%20%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="nodejs-模块介绍"><a href="#nodejs-模块介绍" class="headerlink" title="nodejs 模块介绍"></a>nodejs 模块介绍</h2><p>1、Nodejs 自带服务器，不需要像其他语言要引入http服务器</p>
<p>2、exports </p>
<blockquote>
<p>把公共的功能抽离成为一个单独的js文件作为一个模块。</p>
<p>模块里面的<code>方法或者属性</code>是没办法访问的，要通过exports关键字</p>
<p>使用的时候用require(模块名称)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'get method'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.get=<span class="keyword">get</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="keyword">get</span>:function () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'get method'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    post:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'post method'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.obj=obj;</span><br></pre></td></tr></table></figure>



<p>3、自定义的模块放到<code>node_modules</code>里面</p>
<blockquote>
<p>默认可以通过<em>相对路径</em>找到<code>index.js</code>文件。</p>
<p>如果文件不是叫<code>index.js</code>，可以通过<code>npm init --yes</code> 生成描述文件。</p>
</blockquote>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>npm 安装并管理版本</title>
    <url>/2020/04/02/npm%20%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E6%9C%AC%E5%9C%B0%E5%8C%85/</url>
    <content><![CDATA[<h2 id="npm-安装并管理版本"><a href="#npm-安装并管理版本" class="headerlink" title="npm 安装并管理版本"></a>npm 安装并管理版本</h2><ul>
<li>如果是作为命令行工具使用，就安装全局包</li>
<li>安装本地包：<code>npm install &lt;package_name&gt;</code></li>
<li>安装全局包：<code>npm install -g &lt;package_name&gt;</code></li>
<li>更新包：<code>npm update /-g &lt;package_name&gt;</code></li>
<li>卸载包：<code>npm uninstall /-g &lt;package_name&gt;</code></li>
</ul>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><ul>
<li><p>默认安装全部依赖：<code>npm install</code> </p>
</li>
<li><p>生产环境：<code>npm install &lt;package_name&gt; --save</code></p>
</li>
<li><p>开发环境：<code>npm install &lt;package_name&gt; --save-dev</code></p>
</li>
<li><p>直接安装git连接地址：<code>npm install &lt;git remote url&gt;</code></p>
</li>
<li><p>用@指定版本：<code>npm install sax@1.0.0</code> <code>npm install sax@&quot;&gt;=0.1.0&lt;0.2.0&quot;</code></p>
</li>
<li><p>不触发脚本：<code>npm install sax --ignore-scripts</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">  &quot;md5&quot;: &quot;^2.2.1&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>^</code> 表示第一位版本号不变，后面两位取最新<br><code>~</code> 表示前面两位不变，最后一个取最新<br><code>*</code> 表示全部取最新</p>
</blockquote>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>npm 开发工具</title>
    <url>/2020/04/02/npm%20%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="npm-开发工具"><a href="#npm-开发工具" class="headerlink" title="npm 开发工具"></a>npm 开发工具</h2><ul>
<li><p>curl 工具</p>
<blockquote>
<p>进行普通的网络请求，能够打印网络请求信息：<code>curl -v http://localhost:3000/todos</code></p>
<p>或者直接POST: <code>curl -v -X POST http://localhost:3000/todos -d &#39;content=4444&#39;</code></p>
</blockquote>
</li>
<li><p>网页中拷贝curl命令</p>
</li>
<li><img src="/Users/yujinhai/Library/Application Support/typora-user-images/image-20200406232515099.png" alt="image-20200406232515099" style="zoom:50%;" />
</li>
<li><p>常用参数： -H 表示要加上请求头  -X 表示要加上请求方法  -d表示要加上请求数据  -v 显示详细的信息</p>
</li>
<li><p><code>man curl</code></p>
</li>
<li><p>-d @hello.json 传入json文件</p>
</li>
<li><p>postman</p>
</li>
<li><p>一般命令行后面加上 -h 能够查看帮助</p>
</li>
</ul>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>ruby学习第一课</title>
    <url>/2020/03/30/ruby%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="输出helloworld"><a href="#输出helloworld" class="headerlink" title="输出helloworld"></a>输出<code>helloworld</code></h2><ul>
<li>文件保存 <code>puts &quot;Hello, Ruby!&quot;;</code>  # put相当于print</li>
<li>命令行输入：<code>$ ruby test.rb</code></li>
</ul>
<h2 id="多字符"><a href="#多字符" class="headerlink" title="多字符"></a>多字符</h2><blockquote>
<p> EOC只是随便写的，可以用其他字符，只需保证首尾一样就行</p>
</blockquote>
<ul>
<li>普通字符输出</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print &lt;&lt;EOF</span><br><span class="line">    这是第一种方式创建here document 。</span><br><span class="line">    多行字符串。</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ul>
<li>执行命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print &lt;&lt;&#96;EOC&#96;                 # 执行命令</span><br><span class="line">    echo hi there</span><br><span class="line">    echo lo there</span><br><span class="line">    ls -al</span><br><span class="line">EOC</span><br></pre></td></tr></table></figure>

<h2 id="BEGIN语句"><a href="#BEGIN语句" class="headerlink" title="BEGIN语句"></a>BEGIN语句</h2><ul>
<li>输入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">puts &quot;这是主 Ruby 程序&quot;</span><br><span class="line"> </span><br><span class="line">END &#123;</span><br><span class="line">   puts &quot;停止 Ruby 程序&quot;</span><br><span class="line">&#125;</span><br><span class="line">BEGIN &#123;</span><br><span class="line">   puts &quot;初始化 Ruby 程序&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>输出</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化 Ruby 程序</span><br><span class="line">这是主 Ruby 程序</span><br><span class="line">停止 Ruby 程序</span><br></pre></td></tr></table></figure>

<h2 id="值表示为字符串"><a href="#值表示为字符串" class="headerlink" title="值表示为字符串#{}"></a>值表示为字符串#{}</h2><ul>
<li>相当于<code>swift</code>里面的”()”, <code>OC</code> 里面的<code>[NSString StringWithFormat....];</code></li>
<li>输入 <code>puts &quot;相乘 : #{24*60*60}&quot;;</code></li>
<li>输出 <code>相乘 : 86400</code></li>
<li>输入 `name=”ruby”<br>puts “#{name}” + “ok”</li>
<li>输出 <code>rubyok</code></li>
</ul>
<h2 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h2><ul>
<li>类中变量规范</li>
</ul>
<blockquote>
<p>局部变量：小写字母或_开头</p>
<p>实例变量：@开头</p>
<p>类变量：@@开头</p>
<p>全局变量：$开头</p>
<p>类名一定是大写开头</p>
</blockquote>
<ul>
<li>输入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Customer</span><br><span class="line">   @@no_of_customers&#x3D;0</span><br><span class="line">   def initialize(id, name, addr)</span><br><span class="line">      @cust_id&#x3D;id</span><br><span class="line">      @cust_name&#x3D;name</span><br><span class="line">      @cust_addr&#x3D;addr</span><br><span class="line">   end</span><br><span class="line">   def display_details()</span><br><span class="line">      puts &quot;Customer id #@cust_id&quot;</span><br><span class="line">      puts &quot;Customer name #@cust_name&quot;</span><br><span class="line">      puts &quot;Customer address #@cust_addr&quot;</span><br><span class="line">    end</span><br><span class="line">    def total_no_of_customers()</span><br><span class="line">       @@no_of_customers +&#x3D; 1</span><br><span class="line">       puts &quot;Total number of customers: #@@no_of_customers&quot;</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<ul>
<li>使用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cust1&#x3D;Customer.new(&quot;1&quot;, &quot;John&quot;, &quot;Wisdom Apartments, Ludhiya&quot;)</span><br><span class="line">cust1.display_details()</span><br><span class="line">cust1.total_no_of_customers()</span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li>变量和类很相似</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ruby 支持五种类型的变量。</span><br><span class="line">	一般小写字母、下划线开头：变量（Variable）。</span><br><span class="line">	$开头：全局变量（Global variable）。</span><br><span class="line">	@开头：实例变量（Instance variable）。</span><br><span class="line">	@@开头：类变量（Class variable）类变量被共享在整个继承链中</span><br><span class="line">	大写字母开头：常数（Constant）。</span><br></pre></td></tr></table></figure>






















]]></content>
      <categories>
        <category>ruby</category>
      </categories>
  </entry>
  <entry>
    <title>xcodebuild学习</title>
    <url>/2020/03/29/xcodebuild%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><a href="https://developer.apple.com/library/archive/technotes/tn2339/_index.html" target="_blank" rel="noopener">参考地址</a></p>
<h3 id="xctool-和xcodebuild"><a href="#xctool-和xcodebuild" class="headerlink" title="xctool 和xcodebuild"></a>xctool 和xcodebuild</h3><p>1、xctool 是一款开源软件 <code>brew install xctool</code>，本文暂时没有讨论xctool.</p>
<p>2、xcodebuild是苹果自带的,用于编译，打包和测试。</p>
<ul>
<li><p>查看帮助，看下<code>xcodebuild</code>支持哪些命令<br><code>xcodebuild -help</code></p>
<blockquote>
<p><code>help</code>列出了两部分，一部分是命令行用到的，另一部分是<code>export.plist</code>用到<br>命令行输入：指定那个workspace，scheme,路径….<br><code>export.plist</code>：签名证书等…</p>
</blockquote>
</li>
<li><p>查看项目的<code>scheme</code><br><code>xcodebuild -list -workspace TravisCIDemo.xcworkspace</code></p>
</li>
<li><p>编译你的项目<br><code>xcodebuild -workspace TravisCIDemo.xcworkspace -scheme TravisCIDemo build</code></p>
</li>
<li><p>打包你的项目<br><code>xcodebuild -workspace TravisCIDemo.xcworkspace -scheme TravisCIDemo archive</code></p>
</li>
<li><p>1) 打包项目到指定文件,会生成一个<code>build</code>文件</p>
<blockquote>
<p><code>xcodebuild -workspace TravisCIDemo.xcworkspace -scheme TravisCIDemo -archivePath build/TravisCIDemo.xcarchive archive</code></p>
</blockquote>
</li>
<li><p>2) 创建一个<code>export.plist</code>文件，并添加一个字段，表示打包的类型，常用的有<code>app-store, ad-hoc, package, enterprise, development, and developer-id</code></p>
</li>
<li><p>3) 打包，然后就可以在<code>build</code>文件中看到api</p>
<blockquote>
<p><code>xcodebuild -exportArchive -archivePath build/TravisCIDemo.xcarchive -exportPath build -exportOptionsPlist export.plist</code></p>
</blockquote>
</li>
</ul>
<img src="/2020/03/29/xcodebuild%E5%AD%A6%E4%B9%A0/WX202003291.png" class="" width="1">

<img src="/2020/03/29/xcodebuild%E5%AD%A6%E4%B9%A0/WX202003292.png" class="" width="2">

<ul>
<li><p>Build Products Path<br><code>xcodebuild -workspace TravisCIDemo.xcworkspace -scheme TravisCIDemo SYMROOT=&quot;/Users/yujinhai/Desktop/GitProject/travisCIDemo&quot;</code></p>
</li>
<li><p>Installation Build Products Location<br><code>xcodebuild -exportArchive -archivePath build/TravisCIDemo.xcarchive -exportPath build -exportOptionsPlist export.plist</code></p>
</li>
<li><p>UITest，id是设备的UUID<br><code>xcodebuild test -workspace MyApplication.xcworkspace -scheme iOSApp -destination &#39;platform=iOS,id=965058a1c30d845d0dcec81cd6b908650a0d701c&#39;</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>持续构建</category>
      </categories>
  </entry>
  <entry>
    <title>fastlane自动化打包</title>
    <url>/2020/03/27/fastlane%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h2 id="参考蒲公英地址"><a href="#参考蒲公英地址" class="headerlink" title="参考蒲公英地址"></a><a href="https://www.pgyer.com/doc/view/fastlane" target="_blank" rel="noopener">参考蒲公英地址</a></h2><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a><a href="https://www.jianshu.com/p/43b703b6eb45" target="_blank" rel="noopener">参考地址</a></h2><h2 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a><a href="https://github.com/YUJINHAI2015/FastlaneDemo/tree/master/FastlaneUpToPgyer" target="_blank" rel="noopener">demo地址</a></h2><h2 id="定义lane"><a href="#定义lane" class="headerlink" title="定义lane"></a>定义lane</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lane :archive do</span><br><span class="line"></span><br><span class="line">  puts &quot;请输入版本描述信息：&quot;</span><br><span class="line">  desc &#x3D; STDIN.gets</span><br><span class="line"></span><br><span class="line">  build_app(export_method: &quot;ad-hoc&quot;, output_directory: &quot;ipa&quot;)</span><br><span class="line">  pgyer(api_key: &quot;a215682d481d742271b61aabfe1baffe&quot;, user_key: &quot;06c794bc27fbe97b626a3a21f12419f5&quot;,password: &quot;12345678&quot;, update_description: &quot;#&#123;desc&#125;&quot;)</span><br><span class="line">  </span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h2 id="遇到问题，"><a href="#遇到问题，" class="headerlink" title="遇到问题，"></a>遇到问题，</h2><p>1 、fastlane 版本太低，<br><code>sudo gem install fastlane</code></p>
<p>2、项目需要指定 <code>team</code></p>
<p>3、更新profile后打包还是用旧的证书</p>
<ul>
<li>~/资源库/MobileDevice/Provisioning Profiles 删掉多余的证书</li>
<li>添加 <code>export_xcargs: &quot;-allowProvisioningUpdates&quot;</code></li>
<li><a href="https://docs.fastlane.tools/codesigning/xcode-project/" target="_blank" rel="noopener">参考地址</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lane :archive do</span><br><span class="line"></span><br><span class="line">  puts &quot;请输入版本描述信息：&quot;</span><br><span class="line">  desc &#x3D; STDIN.gets</span><br><span class="line"></span><br><span class="line">  build_app(export_method: &quot;ad-hoc&quot;, export_xcargs: &quot;-allowProvisioningUpdates&quot;, output_directory: &quot;~&#x2F;Desktop&#x2F;outputAPI&quot;)</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">  pgyer(api_key: &quot;a215682d481d742271b61aabfe1baffe&quot;, user_key: &quot;06c794bc27fbe97b626a3a21f12419f5&quot;,password: &quot;12345678&quot;, update_description: &quot;#&#123;desc&#125;&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="查看更多build-app的输入信息"><a href="#查看更多build-app的输入信息" class="headerlink" title="查看更多build_app的输入信息"></a>查看更多build_app的输入信息</h2><p><code>fastlane action build_app</code></p>
]]></content>
      <categories>
        <category>持续构建</category>
      </categories>
  </entry>
  <entry>
    <title>git</title>
    <url>/2020/03/26/git/</url>
    <content><![CDATA[<h2 id="如何修改最近一次提交注释信息"><a href="#如何修改最近一次提交注释信息" class="headerlink" title="如何修改最近一次提交注释信息"></a>如何修改最近一次提交注释信息</h2><p>1、修改本地最近一次提交记录,进入<code>vim</code>编辑模式</p>
<p><code>git commit --amend</code><br>或<br><code>git commit --amend -m &quot;remove helloworld lane&quot;</code></p>
<img src="/2020/03/26/git/WX20200321.png" class="" width="1">

<p>2、强制覆盖远程最近一次提交记录(特别注意远程其他人是否已经提交了代码)</p>
<p><code>git push origin master --force</code></p>
<img src="/2020/03/26/git/WX20200322.png" class="" width="2">

<h2 id="不小心提交了重要信息到远程仓库，如何抢救"><a href="#不小心提交了重要信息到远程仓库，如何抢救" class="headerlink" title="不小心提交了重要信息到远程仓库，如何抢救"></a>不小心提交了重要信息到远程仓库，如何抢救</h2><p>1、我们假设<code>remove helloworld lane</code>这次提交有重要信息，他已经在远程分支了。</p>
<img src="/2020/03/26/git/WX20200323.png" class="" width="3">

<p>2、我们需要在这条分支的前一次提交那里，选择重置，软合并。</p>
<img src="/2020/03/26/git/WX20200324.png" class="" width="4">

<img src="/2020/03/26/git/WX20200325.png" class="" width="5">

<p>3、强制覆盖远程最近一次提交记录(特别注意远程其他人是否已经提交了代码)<br><code>git push origin master --force</code></p>
<h2 id="撤销未发布的提交"><a href="#撤销未发布的提交" class="headerlink" title="撤销未发布的提交"></a>撤销未发布的提交</h2><p>命令行：<code>git reset —hard HEAD^</code> 或者 <code>git reset —hard @{1}</code><br>sourcetree: 右击—》将master重置到这次提交-》混合合并</p>
<h2 id="查看文件记录和状态"><a href="#查看文件记录和状态" class="headerlink" title="查看文件记录和状态"></a>查看文件记录和状态</h2><p><code>git status —short</code><br><code>git status —short —gitignored</code></p>
<h2 id="查看修订版本的差异"><a href="#查看修订版本的差异" class="headerlink" title="查看修订版本的差异"></a>查看修订版本的差异</h2><p> 1、比较工作区和暂存区的差别<br><code>git diff</code></p>
<p>2、查看暂存区和提交的差别<br><code>git diff —staged (git diff —cached)</code></p>
<p>3、查看工作区和提交的区别<br><code>git diff HEAD</code></p>
<h2 id="一个仓库拥有多个分支"><a href="#一个仓库拥有多个分支" class="headerlink" title="一个仓库拥有多个分支"></a>一个仓库拥有多个分支</h2><p><code>git checkout --orphan gh-pages</code></p>
<h2 id="分支使用"><a href="#分支使用" class="headerlink" title="分支使用"></a>分支使用</h2><p>新建：<code>git branch testing</code><br>切换：<code>git checkout testing</code><br>切换匿名分支：<code>git checkout —detach 3ead34d</code><br>从匿名分支回到原来分支： <code>git checkout -</code></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>cordova简单使用</title>
    <url>/2020/03/26/cordova%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>cordova</category>
      </categories>
  </entry>
  <entry>
    <title>fastlaneSnapshot</title>
    <url>/2020/03/22/fastlaneSnapshot/</url>
    <content><![CDATA[<p><a href="https://s0docs0fastlane0tools.icopy.site/getting-started/ios/screenshots/" target="_blank" rel="noopener">中文文档</a><br><a href="https://docs.fastlane.tools/getting-started/ios/screenshots/" target="_blank" rel="noopener">英文文档</a></p>
<h2 id="demo-地址"><a href="#demo-地址" class="headerlink" title="demo 地址"></a><a href="https://github.com/YUJINHAI2015/FastlaneDemo/tree/master/FastlaneSnapshot" target="_blank" rel="noopener">demo 地址</a></h2><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul>
<li>xcode Version 11.3.1 (11C504)</li>
<li>fastlane Version 2.143.0</li>
</ul>
<h2 id="创建一个项目-FastlaneSnapshot"><a href="#创建一个项目-FastlaneSnapshot" class="headerlink" title="创建一个项目 FastlaneSnapshot"></a>创建一个项目 <code>FastlaneSnapshot</code></h2><ul>
<li>用<code>xcode</code>新建项目<code>FastlaneSnapshot</code></li>
<li>用命令行进入到<code>FastlaneSnapshot</code>所在的路径，创建一个文件夹和两个空文件，运行下面命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$: mkdir fastlane</span><br><span class="line">$: touch fastlane&#x2F;Appfile</span><br><span class="line">$: touch fastlane&#x2F;Fastfile</span><br></pre></td></tr></table></figure>

<h2 id="创建一个-FastlaneSnapshotUITests-并按照下图操作"><a href="#创建一个-FastlaneSnapshotUITests-并按照下图操作" class="headerlink" title="创建一个 FastlaneSnapshotUITests 并按照下图操作"></a>创建一个 <code>FastlaneSnapshotUITests</code> 并按照下图操作</h2><ol>
<li><code>$: fastlane snapshot init</code></li>
<li>新建一个<code>FastlaneSnapshotUITests target</code></li>
<li>拖拽<code>SnapshotHelper.swift</code> 到 <code>FastlaneSnapshotUITests</code></li>
<li>编辑<code>FastlaneSnapshotUITests</code> 的 <code>scheme</code></li>
<li>在 <code>setUp</code> 添加代码</li>
</ol>
<img src="/2020/03/22/fastlaneSnapshot/snapshotInit.png" class="" title="snapshotInit">

<img src="/2020/03/22/fastlaneSnapshot/UITests_Targert.png" class="" title="UITests_Targert">

<img src="/2020/03/22/fastlaneSnapshot/DrapHelper.png" class="" title="DrapHelper">

<img src="/2020/03/22/fastlaneSnapshot/scheme.png" class="" title="scheme">

<img src="/2020/03/22/fastlaneSnapshot/setup.png" class="" title="setup">

<h2 id="运行fastlane-snapshot"><a href="#运行fastlane-snapshot" class="headerlink" title="运行fastlane snapshot"></a>运行<code>fastlane snapshot</code></h2><p>报错：<code>Exit status: 70</code>   <code>Caught error... 70</code>  – 猜测是编译版本太高了。<br>1、13.0的版本太高了，改成10.0<br>2、删掉一些不必要的代码，确保项目能够编译通过。–记得<code>build</code>一下。<br>3、在命令行中记性运行：<code>fastlane snapshot</code></p>
<img src="/2020/03/22/fastlaneSnapshot/iosVersion.png" class="" title="iosVersion">

<img src="/2020/03/22/fastlaneSnapshot/changeVersion.png" class="" title="changeVersion">

<h2 id="手机型号太多了，运行会很久，我们修改一下Snapfile"><a href="#手机型号太多了，运行会很久，我们修改一下Snapfile" class="headerlink" title="手机型号太多了，运行会很久，我们修改一下Snapfile"></a>手机型号太多了，运行会很久，我们修改一下<code>Snapfile</code></h2><p><code>&amp;: open fastlane/Snapfile</code></p>
<img src="/2020/03/22/fastlaneSnapshot/selectedDevice.png" class="" title="selectedDevice">

<p>重新运行 <code>fastlane snapshot</code> 这次就快很多了。</p>
<h2 id="fastlane-版本问题"><a href="#fastlane-版本问题" class="headerlink" title="fastlane 版本问题"></a><code>fastlane</code> 版本问题</h2><p><code>undefined method &#39;each&#39; for nil:NilClass</code> 这个错误就是 版本问题引起的。</p>
<ul>
<li><p>查看版本 <code>fastlane --version</code><br>发现<code>fastlane</code> 可以通过 <code>brew</code>或者<code>gem</code>按照，<a href="https://www.cnblogs.com/ayseeing/p/3610777.html" target="_blank" rel="noopener">两者区别</a>,<br>而我现在是通过<code>brew</code>安装的，版本是 2.28.3。而且一直报上面的错误，更新到最新也不行：<code>brew upgrade fastlane</code><br>现在尝试用<code>gem</code>来安装看看。</p>
</li>
<li><p>先卸载掉<code>brew</code>安装的：<code>brew cask uninstall fastlane</code></p>
</li>
<li><p>通过<code>gem</code>安装： <code>sudo gem install fastlane</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  FastlaneSnapshot fastlane --version</span><br><span class="line">fastlane installation at path:</span><br><span class="line">&#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.6.0&#x2F;gems&#x2F;fastlane-2.143.0&#x2F;bin&#x2F;fastlane</span><br><span class="line">-----------------------------</span><br><span class="line">[✔] 🚀 </span><br><span class="line">fastlane 2.143.0</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="参考链接：undefined-method-‘each’-for-nil-NilClass"><a href="#参考链接：undefined-method-‘each’-for-nil-NilClass" class="headerlink" title="参考链接：undefined method ‘each’ for nil:NilClass"></a>参考链接：<a href="https://github.com/fastlane/fastlane/issues/15496" target="_blank" rel="noopener">undefined method ‘each’ for nil:NilClass</a></h2>]]></content>
      <categories>
        <category>持续构建</category>
      </categories>
  </entry>
  <entry>
    <title>fastlaneWithTravisCI</title>
    <url>/2020/03/21/fastlaneWithTravisCI/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>持续构建</category>
      </categories>
  </entry>
  <entry>
    <title>fastlane</title>
    <url>/2020/03/21/fastlaneDemo/</url>
    <content><![CDATA[<h2 id="demo-地址"><a href="#demo-地址" class="headerlink" title="demo 地址"></a><a href="https://github.com/YUJINHAI2015/FastlaneDemo/tree/master/FastlaneDemo" target="_blank" rel="noopener">demo 地址</a></h2><h2 id="安装：官网"><a href="#安装：官网" class="headerlink" title="安装：官网"></a>安装：<a href="https://docs.fastlane.tools/getting-started/ios/setup/" target="_blank" rel="noopener">官网</a></h2><ul>
<li>查看是否安装成功：<code>fastlane --version</code></li>
</ul>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><ul>
<li>用<code>xcode</code>新建项目<code>FastlaneDemo</code></li>
<li>用命令行进入到<code>FastlaneDemo</code>所在的路径，创建一个文件夹和两个空文件，运行下面命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$: mkdir fastlane</span><br><span class="line">$: touch fastlane&#x2F;Appfile</span><br><span class="line">$: touch fastlane&#x2F;Fastfile</span><br></pre></td></tr></table></figure>
<ul>
<li><p>在<code>Fastfile</code>文件里面输入这段语句：</p>
</li>
<li><p><code>open fastlane/Fastfile</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lane :OutputHelloWorld do</span><br><span class="line">  puts &quot;helloWorld&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li>
<li><p>在命令行中运行 <code>fastlane OutputHelloWorld</code></p>
</li>
</ul>
<img src="/2020/03/21/fastlaneDemo/OutputHelloWorld.png" class="" title="output">

<ul>
<li><a href="https://docs.fastlane.tools/actions/run_tests/#parameters" target="_blank" rel="noopener">常用参数列表</a></li>
</ul>
]]></content>
      <categories>
        <category>持续构建</category>
      </categories>
  </entry>
  <entry>
    <title>hexo添加阅读次数</title>
    <url>/2020/03/20/hexoCounter/</url>
    <content><![CDATA[<p>1、登录<a href="">https://leancloud.cn</a><br>2、在<code>leancloud</code>创建应该应用<br>3、在<code>leancloud</code>进入<code>存储</code>-》<code>结构化数据</code>–》<code>创建Class</code>–》<code>命名为Counter</code><br>4、在<code>leancloud</code>进入<code>设置</code>–》<code>安全中心</code>–&gt;<code>Web 安全域名</code>–》添加你的仓库发布地址<code>https://yujinhai2015.github.io</code><br>5、进入到主题的<code>_config.yml</code><br>打开 <code>leancloud_visitors</code> 和 <code>valine</code></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>hexo添加搜索</title>
    <url>/2020/03/20/hexoSearch/</url>
    <content><![CDATA[<p>1、<code>npm install hexo-generator-searchdb --save</code><br>2、在主题<code>_config.yml</code> 添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">path: search.xml</span><br><span class="line">field: post</span><br><span class="line">format: html</span><br><span class="line">limit: 10000</span><br></pre></td></tr></table></figure>
<p>3、找到这个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>hexoCommand</title>
    <url>/2020/03/20/hexoCommand/</url>
    <content><![CDATA[<p><code>hexo clean</code><br><code>hexo g</code><br><code>hexo s</code><br><code>hexo d</code><br><code>hexo new filename</code><br><code>hexo new page pagename</code></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>hexo 添加分类</title>
    <url>/2020/03/20/hexoCategories/</url>
    <content><![CDATA[<p>1、在<code>themes</code>的<code>_config.yml</code>里打开<code>categories</code><br>2、运行<code>hexo new page categories</code><br>3、打开 <code>categories</code>文件夹下面的<code>index.md</code>, 添加下面代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">title: categories</span><br><span class="line">date: 2020-03-20 22:37:45</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>4、新建文件 <code>hexo new useCategories</code><br>打开文件并添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2020-03-20 22:24:09</span><br><span class="line">categories: hexo use</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>5、自动添加<code>categories</code>字段<br>打开 <code>scaffolds/post.md</code><br>添加一行<code>categories:</code></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>hexo安装流程</title>
    <url>/2020/03/20/hexo%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方网站</a></p>
<h3 id="hexo安装流程"><a href="#hexo安装流程" class="headerlink" title="hexo安装流程"></a>hexo安装流程</h3><ul>
<li><p>安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a></p>
</li>
<li><p>安装 <a href="https://git-scm.com" target="_blank" rel="noopener">git</a></p>
</li>
<li><p>安装 hexo <code>npm install -g hexo-cli</code></p>
</li>
</ul>
<h3 id="运行网站"><a href="#运行网站" class="headerlink" title="运行网站"></a>运行网站</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>运行后的文件结构如下面所示：</p>
<img src="/2020/03/20/hexo%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/file_struct.png" class="" title="file_struct">

<h3 id="config-yml配置信息"><a href="#config-yml配置信息" class="headerlink" title="_config.yml配置信息"></a>_config.yml配置信息</h3><p><a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置信息</a></p>
<h3 id="hexo创建文件（创建的-md文件就会直接显示到网站上面）"><a href="#hexo创建文件（创建的-md文件就会直接显示到网站上面）" class="headerlink" title="hexo创建文件（创建的.md文件就会直接显示到网站上面）"></a>hexo创建文件（创建的.md文件就会直接显示到网站上面）</h3><ul>
<li><p><code>hexo new &lt;filename&gt;</code> </p>
<blockquote>
<p>例如：<code>hexo new test</code> 该命令创建的文件会直接放在 _posts 文件夹下面，这里面的文件可以直接发布到网站上面。</p>
</blockquote>
</li>
<li><p><code>hexo new drafts &lt;filename&gt;</code></p>
<blockquote>
<p>例如：<code>hexo new drafts my_draft</code> drafts 是 hexo 的关键字，所创建的文件会放到 _drafts 文件夹下面，需要通过 <code>hexo publish &lt;filename&gt;</code> 将文件放到 _posts 里面。</p>
</blockquote>
</li>
<li><p><code>hexo new &lt;folder&gt; &lt;filename&gt;</code></p>
<blockquote>
<p>例如： <code>hexo new my_folder my_filename</code> 这种方式创建的文件，要通过拼接的方式，才能够访问到里面的文件。</p>
</blockquote>
</li>
<li><p>资源文件 <code>post_asset_folder: true</code> </p>
<blockquote>
<p>每次 new 一个文件，就会创建相应的资源文件夹。</p>
<p>如果只是少量的资源文件，可以自己放到 <code>source/images</code> 里面。</p>
</blockquote>
</li>
<li><p>数据文件 <code>source/_data</code></p>
<blockquote>
<p>一些需要重复使用的文件，可以通过这种方式存储。</p>
</blockquote>
</li>
<li><p>创建新的标签页 <code>hexo new page [name]</code></p>
<blockquote>
<p>这种方式创建了一个二级页面</p>
</blockquote>
</li>
</ul>
<h3 id="hexo服务器"><a href="#hexo服务器" class="headerlink" title="hexo服务器"></a>hexo服务器</h3><ul>
<li><p>安装 <code>npm install hexo-server --save</code></p>
</li>
<li><p>启动 <code>hexo server</code></p>
</li>
<li><p>访问 <code>http://localhost:4000</code></p>
</li>
</ul>
<h3 id="hexo生成和部署"><a href="#hexo生成和部署" class="headerlink" title="hexo生成和部署"></a>hexo生成和部署</h3><ul>
<li><p>生成 <code>hexo g</code> 或 <code>hexo generate</code></p>
</li>
<li><p>部署 <code>hexo d</code> 或 <code>hexo deploy</code></p>
</li>
</ul>
<h3 id="hexo发布到GitHub"><a href="#hexo发布到GitHub" class="headerlink" title="hexo发布到GitHub"></a>hexo发布到GitHub</h3><p>1、新建 <a href="https://github.com/YUJINHAI2015/yujinhai2015.github.io/settings" target="_blank" rel="noopener">git 仓库</a> ，命名方式：<code>&lt;你的 GitHub 用户名&gt;.github.io</code></p>
<blockquote>
<p>例如：<code>https://github.com/YUJINHAI2015/yujinhai2015.github.io</code></p>
</blockquote>
<p>2、创建两条分支，<code>master</code> 和 <code>hexo</code></p>
<blockquote>
<p><code>master</code> 分支放网站生成文件，编译后的文件。也就是 <code>deploy</code> 的路径。</p>
<p><code>hexo</code> 分支放网站的源文件。也就是 <code>hexo init</code> 后的文件。</p>
<p><strong>注意: .gitignore 文件中要包含 public 一行</strong></p>
</blockquote>
<img src="/2020/03/20/hexo%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/hexo_branch.png" class="" title="hexo_branch">

<p>3、将 <a href="https://github.com/marketplace/travis-ci" target="_blank" rel="noopener">Travis CI</a> 添加到你的 <code>GitHub</code> 账号中</p>
<p>4、前往 <code>GitHub</code> 的 <a href="https://github.com/settings/installations" target="_blank" rel="noopener">Applications settings</a>，配置 <code>Travis CI</code> 权限，使其能够访问你的 <code>repository</code>。</p>
<p>5、在 <code>GitHub</code> 中新建 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal Access Token</a>，只勾选 <code>repo</code>选项，然后复制 <code>Token</code> 并保存好。</p>
<p>6、打开 <a href="https://travis-ci.com" target="_blank" rel="noopener">Travis CI</a>，按照步骤打开 <code>setting</code></p>
<img src="/2020/03/20/hexo%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/travis_setting.png" class="" title="travis_setting">

<p>7、找到 <code>Environment Variables</code> 在 <code>NAME</code> 添加 <code>github_token</code>, <code>VALUE</code> 添加从 <code>GitHub</code> 复制的 <code>token</code>, <code>DISPLAY VALUE IN BUILD LOG</code> 不打开。</p>
<blockquote>
<p><code>github_token</code> 是自己规定的 <code>key</code> ，在后面会继续用到。</p>
</blockquote>
<img src="/2020/03/20/hexo%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/travis_add_token.png" class="" title="token">

<p>8、在你的 <code>Hexo</code> 站点文件夹中新建一个 <code>.travis.yml</code> 文件</p>
<img src="/2020/03/20/hexo%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/file_struct.png" class="" title="file_struct">

<p>9、配置 <code>.travis.yml</code> 和 <code>_config.yml</code><br><code>.travis.yml</code> 能够实现自动部署<br><code>_config.yml</code> 是 <code>hexo</code> 的配置文件<br>这里要特别注意yml的语法格式，一定要用空格键进行缩进，不能用Tab.</p>
<p>打开 <code>_config.yml</code> 文件，在 <code>deploy</code> 字段中修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  # 提交 Git 仓库</span><br><span class="line">  type: git </span><br><span class="line">  # 分支是 master 这里放在编译后的文件</span><br><span class="line">  branch: master </span><br><span class="line">  # repo 里面有个字段 github_token 是在Travis CI 里面添加token规定的。</span><br><span class="line">  repo: https:&#x2F;&#x2F;github_token@github.com&#x2F;YUJINHAI2015&#x2F;yujinhai2015.github.io.git</span><br></pre></td></tr></table></figure>

<p>打开 <code>.travis.yml</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language: node_js # 设置语言</span><br><span class="line">sudo: required # 需要sudo权限</span><br><span class="line">node_js: stable # 设置相应版本</span><br><span class="line"></span><br><span class="line"># 指定缓存模块，可选。缓存可加快编译速度。</span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">    - node_modules</span><br><span class="line"></span><br><span class="line"># 指定博客源码分支，因人而异。hexo博客源码托管在独立repo则不用设置此项</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - web</span><br><span class="line"></span><br><span class="line"># tarvis生命周期执行顺序详见官网文档</span><br><span class="line">before_install:</span><br><span class="line">  - npm install -g hexo-cli</span><br><span class="line"># Submodules</span><br><span class="line">  # 这两步便是将作为 sub module 的主题下载下来</span><br><span class="line">  - git submodule init</span><br><span class="line">  - git submodule update</span><br><span class="line"></span><br><span class="line"># Start: Build Lifecycle</span><br><span class="line">install:</span><br><span class="line">  - npm install</span><br><span class="line">  - npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">    - hexo clean # 清除</span><br><span class="line">    - hexo generate # 生成</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置git提交名，邮箱；替换真实token到_config.yml文件，最后depoy部署</span><br><span class="line">after_script:</span><br><span class="line">  - git config user.name &quot;yujinhai&quot;</span><br><span class="line">  - git config user.email &quot;yujinhai2019@163.com&quot;</span><br><span class="line">  # 替换同目录下的_config.yml文件中gh_token字符串为travis后台刚才配置的变量，注意此处sed命令用了双引号。单引号无效！</span><br><span class="line">  - sed -i &quot;s&#x2F;github_token&#x2F;$&#123;github_token&#125;&#x2F;g&quot; .&#x2F;_config.yml</span><br><span class="line">  - hexo deploy</span><br><span class="line"># End: Build LifeCycle</span><br></pre></td></tr></table></figure>

<p>10、配置 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">next</a> 主题</p>
<ul>
<li><p>先<code>fork next</code>主题，不然<code>TravisCI</code>会下载不下来</p>
</li>
<li><p><code>git submodule add https://github.com/你自己的仓库/hexo-theme-next.git themes/next</code> <a href="https://www.jianshu.com/p/9000cd49822c" target="_blank" rel="noopener">submodule</a></p>
</li>
<li><p>更改<code>_config.yml</code>中的主题</p>
</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
</search>
